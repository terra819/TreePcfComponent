<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root"
    xmlns=""
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>


  <data name="TreePcfComponent_Display_Key" xml:space="preserve">
    <value>Composant Arbre</value>
    <comment>Texte d'affichage pour le composant arbre</comment>
  </data>
  <data name="TreePcfComponent_Desc_Key" xml:space="preserve">
    <value>Permettre aux utilisateurs de sélectionner plusieurs éléments hiérachiques intégrés dans un arbre</value>
    <comment>Texte d'affichage pour la description des composants de l'arbre</comment>
  </data>
  <data name="treeEntityCollectionName_Display_Key" xml:space="preserve">
    <value>Nom de l'entité de l'arbre</value>
    <comment>Texte d'affichage pour le nom logique de la collection de l'entité</comment>
  </data>
  <data name="treeEntityCollectionName_Desc_Key" xml:space="preserve">
    <value>Le nom de la collection de l'entité à utiliser</value>
    <comment>Texte de description pour le nom logique de la collection de l'entité</comment>
  </data>
  <data name="treeParentEntityAttribute_Display_Key" xml:space="preserve">
    <value>Attribut du parent de l'arbre</value>
    <comment>Texte d'affichage pour le nom logique de l'attribut parent de l'entité</comment>
  </data>
  <data name="treeParentEntityAttribute_Desc_Key" xml:space="preserve">
    <value>Le nom logique du parent de l'entité</value>
    <comment>Texte de description pour le nom logique de l'attribut parent de l'entité</comment>
  </data>
  <data name="treeNameAttribute_Display_Key" xml:space="preserve">
    <value>Attribute Nom de l'arbre</value>
    <comment>Texte d'affichage pour le l'attribut nom de l'arbre</comment>
  </data>
  <data name="treeNameAttribute_Desc_Key" xml:space="preserve">
    <value>Le nom logique de l'attribut nom de l'arbre</value>
    <comment>Texte de description pour l'attribut nom de l'arbre</comment>
  </data>
  <data name="descriptionAttribute_Display_Key" xml:space="preserve">
    <value>Attribut description de l'arbre</value>
    <comment>Texte d'affichage pour le l'attribut description de l'arbre</comment>
  </data>
  <data name="descriptionAttribute_Desc_Key" xml:space="preserve">
    <value>Le nom logique de l'attribut description de l'arbre</value>
    <comment>Texte de description pour l'attribut description de l'arbre</comment>
  </data>
  <data name="extraTitleDetailsAttribute_Display_Key" xml:space="preserve">
    <value>Attribut détails extra pour titre de l'arbre</value>
    <comment>Texte d'affichage pour le l'attribut détails extra pour titre de l'arbre</comment>
  </data>
  <data name="extraTitleDetailsAttribute_Desc_Key" xml:space="preserve">
    <value>La longueur maximale du nom que vous verrez dans la liste déroulante de l'arbre</value>
    <comment>Texte de description pour l'attribut détails extra pour titre de l'arbre</comment>
  </data>
  <data name="isCheckableAttribute_Display_Key" xml:space="preserve">
    <value>Attribut est coché de l'arbre</value>
    <comment>Texte d'affichage pour le l'attribut est coché de l'arbre</comment>
  </data>
  <data name="isCheckableAttribute_Desc_Key" xml:space="preserve">
    <value>Le nom logique de l'attribut est coché de l'arbre</value>
    <comment>Texte de description pour l'attribut est coché de l'arbre</comment>
  </data>
  <data name="maxNameDisplayLength_Display_Key" xml:space="preserve">
    <value>Longueur maximale d'affichage du nom</value>
    <comment>Texte d'affichage pour la Longueur maximale d'affichage du nom</comment>
  </data>
  <data name="maxNameDisplayLength_Desc_Key" xml:space="preserve">
    <value>Le nom logique de l'attribut détails extra pour titre de l'arbre</value>
    <comment>Texte de description pour la longueur maximale d'affichage du nom</comment>
  </data>
  <data name="idAttribute_Display_Key" xml:space="preserve">
    <value>L'attribut du champ Id de l'entité arbre</value>
    <comment>Texte d'affichage pour l'attribut du champ Id de l'entité arbre</comment>
  </data>
  <data name="idAttribute_Desc_Key" xml:space="preserve">
    <value>Le nom logique de l'attribut Id pour l'entité arbre</value>
    <comment>Texte de description pour le nom logique de l'attribut Id pour l'entité arbre</comment>
  </data>
  <data name="relationshipName_Display_Key" xml:space="preserve">
    <value>Nom de la relation</value>
    <comment>Texte d'affichage pour le nom de la relation</comment>
  </data>
  <data name="relationshipName_Desc_Key" xml:space="preserve">
    <value>Nom de la relation entre l'entité primaire et l'entité liée</value>
    <comment>Texte d'affichage pour la description du nom de la relation</comment>
  </data>
  <data name="relationshipEntity_Display_Key" xml:space="preserve">
    <value>Nom d'entité de relation</value>
    <comment>Texte d'affichage du nom d'entité de relation</comment>
  </data>
  <data name="relationshipEntity_Desc_Key" xml:space="preserve">
    <value>Nom logique de l'entité de relation</value>
    <comment>Texte d'affichage de la description du nom logique de l'entité de relation</comment>
  </data>
  <data name="pleaseSelect" xml:space="preserve">
    <value>Selectionner...</value>
    <comment>Texte d'affichage pour faire la selection d'un item dans l'arbre</comment>
  </data>
  <data name="createRecord" xml:space="preserve">
    <value>Créez le fichier pour y avoir accès</value>
    <comment>Texte d'affichage pour dire de créer le fichier pour utiliser le PCF</comment>
  </data>
</root>